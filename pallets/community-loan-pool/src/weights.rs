
//! Autogenerated weights for `pallet_community_loan_pool`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `LAPTOP-DFFNONK6`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_community_loan_pool
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/community-loan-pool/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions needed for pallet_community_loan_pool.
pub trait WeightInfo {
	fn propose() -> Weight;
	fn add_committee_member() -> Weight;
	fn set_milestones() -> Weight;
	fn vote_on_proposal() -> Weight;
}

/// Weight functions for `pallet_community_loan_pool`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CommunityLoanPool::ReservedLoanAmount` (r:1 w:0)
	/// Proof: `CommunityLoanPool::ReservedLoanAmount` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::ProposalCount` (r:1 w:1)
	/// Proof: `CommunityLoanPool::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::RoundsExpiring` (r:1 w:1)
	/// Proof: `CommunityLoanPool::RoundsExpiring` (`max_values`: None, `max_size`: Some(40022), added: 42497, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::OngoingVotes` (r:0 w:1)
	/// Proof: `CommunityLoanPool::OngoingVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::Proposals` (r:0 w:1)
	/// Proof: `CommunityLoanPool::Proposals` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `43487`
		// Minimum execution time: 43_381_000 picoseconds.
		Weight::from_parts(45_872_000, 0)
			.saturating_add(Weight::from_parts(0, 43487))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `CommunityLoanPool::VotingCommittee` (r:1 w:1)
	/// Proof: `CommunityLoanPool::VotingCommittee` (`max_values`: Some(1), `max_size`: Some(320002), added: 320497, mode: `MaxEncodedLen`)
	fn add_committee_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `321487`
		// Minimum execution time: 15_064_000 picoseconds.
		Weight::from_parts(15_549_000, 0)
			.saturating_add(Weight::from_parts(0, 321487))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CommunityLoanPool::VotingCommittee` (r:1 w:0)
	/// Proof: `CommunityLoanPool::VotingCommittee` (`max_values`: Some(1), `max_size`: Some(320002), added: 320497, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::Proposals` (r:1 w:1)
	/// Proof: `CommunityLoanPool::Proposals` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::OngoingVotes` (r:1 w:1)
	/// Proof: `CommunityLoanPool::OngoingVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::UserVotes` (r:1 w:1)
	/// Proof: `CommunityLoanPool::UserVotes` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	fn set_milestones() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `321487`
		// Minimum execution time: 35_666_000 picoseconds.
		Weight::from_parts(38_272_000, 0)
			.saturating_add(Weight::from_parts(0, 321487))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `CommunityLoanPool::VotingCommittee` (r:1 w:0)
	/// Proof: `CommunityLoanPool::VotingCommittee` (`max_values`: Some(1), `max_size`: Some(320002), added: 320497, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::OngoingVotes` (r:1 w:1)
	/// Proof: `CommunityLoanPool::OngoingVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::UserVotes` (r:1 w:1)
	/// Proof: `CommunityLoanPool::UserVotes` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::Proposals` (r:1 w:0)
	/// Proof: `CommunityLoanPool::Proposals` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	fn vote_on_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `530`
		//  Estimated: `321487`
		// Minimum execution time: 28_296_000 picoseconds.
		Weight::from_parts(31_144_000, 0)
			.saturating_add(Weight::from_parts(0, 321487))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
